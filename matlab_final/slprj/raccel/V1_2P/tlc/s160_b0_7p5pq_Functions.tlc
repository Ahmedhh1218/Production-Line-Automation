%implements s160_b0_7p5pq_Functions "C"

%function rt_mldivide_U1d3x3_U2d3_Yd3x1_snf_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T A[9];
real_T a21;
real_T maxval;
int32_T r1;
int32_T r2;
int32_T r3;
int32_T rtemp;
memcpy(&A[0], &u0[0], 9U * sizeof(real_T));
r1 = 0;
r2 = 1;
r3 = 2;
maxval = muDoubleScalarAbs(u0[0]);
a21 = muDoubleScalarAbs(u0[1]);
if (a21 > maxval) {
    maxval = a21;
    r1 = 1;
    r2 = 0;
}
if (muDoubleScalarAbs(u0[2]) > maxval) {
    r1 = 2;
    r2 = 1;
    r3 = 0;
}
A[r2] = u0[r2] / u0[r1];
A[r3] /= A[r1];
A[r2 + 3] -= A[r1 + 3] * A[r2];
A[r3 + 3] -= A[r1 + 3] * A[r3];
A[r2 + 6] -= A[r1 + 6] * A[r2];
A[r3 + 6] -= A[r1 + 6] * A[r3];
if (muDoubleScalarAbs(A[r3 + 3]) > muDoubleScalarAbs(A[r2 + 3])) {
    rtemp = r2 + 1;
    r2 = r3;
    r3 = rtemp - 1;
}
A[r3 + 3] /= A[r2 + 3];
A[r3 + 6] -= A[r3 + 3] * A[r2 + 6];
y[1] = u1[r2] - u1[r1] * A[r2];
y[2] = (u1[r3] - u1[r1] * A[r3]) - A[r3 + 3] * y[1];
y[2] /= A[r3 + 6];
y[0] = u1[r1] - A[r1 + 6] * y[2];
y[1] -= A[r2 + 6] * y[2];
y[1] /= A[r2 + 3];
y[0] -= A[r1 + 3] * y[1];
y[0] /= A[r1];
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern void rt_mldivide_U1d3x3_U2d3_Yd3x1_snf(\
%assign comma = ""
%<comma>const real_T u0[9]\
%assign comma = ", "
%<comma>const real_T u1[3]\
%assign comma = ", "
%<comma>real_T y[3]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(1, 0, fcnProtoType)>
%return fcnBuff
%endfunction

